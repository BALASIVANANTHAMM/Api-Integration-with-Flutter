import 'dart:convert';

import 'package:flutter/material.dart';

import 'Api/apiModel.dart';
import 'package:http/http.dart' as http;

import 'Api/apiModel2.dart';
import 'Api/apiModel3.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        // This is the theme of your application.
        //
        // TRY THIS: Try running your application with "flutter run". You'll see
        // the application has a purple toolbar. Then, without quitting the app,
        // try changing the seedColor in the colorScheme below to Colors.green
        // and then invoke "hot reload" (save your changes or press the "hot
        // reload" button in a Flutter-supported IDE, or press "r" if you used
        // the command line to start the app).
        //
        // Notice that the counter didn't reset back to zero; the application
        // state is not lost during the reload. To reset the state, use hot
        // restart instead.
        //
        // This works for code too, not just values: Most code changes can be
        // tested with just a hot reload.
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: Api3(),
    );
  }
}

class FrontPage extends StatefulWidget {
  const FrontPage({super.key});

  @override
  State<FrontPage> createState() => _FrontPageState();
}

class _FrontPageState extends State<FrontPage> {
  Future<Autogenerated> fetch() async {
    var result = await http
        .get(Uri.parse("https://api.coindesk.com/v1/bpi/currentprice.json"));
    return Autogenerated.fromJson(jsonDecode(result.body));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Column(
        children: [
          FutureBuilder(
              future: fetch(),
              builder: (BuildContext context, snapshot) {
                if (snapshot.hasData) {
                  return Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Text(snapshot.data!.time!.updated.toString()),
                        Text(snapshot.data!.time!.updatedISO.toString()),
                        Text(snapshot.data!.time!.updateduk.toString()),
                        Text(snapshot.data!.disclaimer.toString()),
                        Text(snapshot.data!.chartName.toString()),
                        Text(snapshot.data!.bpi!.uSD!.code.toString()),
                        Text(snapshot.data!.bpi!.uSD!.rate.toString()),
                        Text(snapshot.data!.bpi!.uSD!.symbol.toString()),
                        Text(snapshot.data!.bpi!.uSD!.rateFloat.toString()),
                      ],
                    ),
                  );
                } else if (snapshot.hasError) {
                  return Text("${snapshot.error}");
                }
                return CircularProgressIndicator();
              })
        ],
      ),
    );
  }
}

class Api2 extends StatefulWidget {
  const Api2({super.key});

  @override
  State<Api2> createState() => _Api2State();
}

class _Api2State extends State<Api2> {
  Future<Agify> fetchDataFromAgify() async {
    var agify = await http.get(Uri.parse("https://api.agify.io/?name=meelad"));
    return Agify.fromJson(jsonDecode(agify.body));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Column(
        children: [
          FutureBuilder(
              future: fetchDataFromAgify(),
              builder: (BuildContext context, snapshot) {
                if (snapshot.hasData) {
                  return Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Text(snapshot.data!.name.toString()),
                        Text(snapshot.data!.age.toString()),
                        Text(snapshot.data!.count.toString()),
                      ],
                    ),
                  );
                }
                return Center(
                  child: CircularProgressIndicator(),
                );
              })
        ],
      ),
    );
  }
}

class Api3 extends StatefulWidget {
  const Api3({super.key});

  @override
  State<Api3> createState() => _Api3State();
}

class _Api3State extends State<Api3> {
  Future<Gendarize> fetchDataFromGender() async {
    var gendar =
        await http.get(Uri.parse("https://api.genderize.io/?name=luc"));
    return Gendarize.fromJson(jsonDecode(gendar.body));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Column(
        children: [
          FutureBuilder(
              future: fetchDataFromGender(),
              builder: (BuildContext context, snapshot) {
                if (snapshot.hasData) {
                  Center(
                    child: Column(
                      children: [
                        // Text(snapshot.data!.name.toString()),
                        // Text(snapshot.data!.gender.toString()),
                        // Text(snapshot.data!.count.toString()),
                        Text(snapshot.data!.probability.toString()),
                      ],
                    ),
                  );
                }
                return CircularProgressIndicator();
              })
        ],
      ),
    );
  }
}
