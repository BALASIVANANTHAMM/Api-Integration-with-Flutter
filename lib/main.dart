import 'dart:convert';

import 'package:api/Api/IdP.dart';
import 'package:api/post/PostPractice.dart';
import 'package:api/post/postapi.dart';
import 'package:api/weather.dart';
import 'package:flutter/material.dart';
import 'Api/Facts.dart';
import 'Api/apiModel.dart';
import 'package:http/http.dart' as http;
import 'Api/apiModel2.dart';
import 'Api/apiModel3.dart';
import 'Api/apiModel4.dart';
import 'Api/apiModel5.dart';
import 'Api/apiModel6.dart';
import 'Api/apiModelList.dart';
import 'limit/RangeSetApi.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        // This is the theme of your application.
        //
        // TRY THIS: Try running your application with "flutter run". You'll see
        // the application has a purple toolbar. Then, without quitting the app,
        // try changing the seedColor in the colorScheme below to Colors.green
        // and then invoke "hot reload" (save your changes or press the "hot
        // reload" button in a Flutter-supported IDE, or press "r" if you used
        // the command line to start the app).
        //
        // Notice that the counter didn't reset back to zero; the application
        // state is not lost during the reload. To reset the state, use hot
        // restart instead.
        //
        // This works for code too, not just values: Most code changes can be
        // tested with just a hot reload.
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: RangeSetApi(),
    );
  }
}

class FrontPage extends StatefulWidget {
  const FrontPage({super.key});

  @override
  State<FrontPage> createState() => _FrontPageState();
}

class _FrontPageState extends State<FrontPage> {
  Future<Autogenerated> fetch() async {
    var result = await http
        .get(Uri.parse("https://api.coindesk.com/v1/bpi/currentprice.json"));
    return Autogenerated.fromJson(jsonDecode(result.body));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Column(
        children: [
          FutureBuilder(
              future: fetch(),
              builder: (BuildContext context, snapshot) {
                if (snapshot.hasData) {
                  return Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Text(snapshot.data!.time!.updated.toString()),
                        Text(snapshot.data!.time!.updatedISO.toString()),
                        Text(snapshot.data!.time!.updateduk.toString()),
                        Text(snapshot.data!.disclaimer.toString()),
                        Text(snapshot.data!.chartName.toString()),
                        Text(snapshot.data!.bpi!.uSD!.code.toString()),
                        Text(snapshot.data!.bpi!.uSD!.rate.toString()),
                        Text(snapshot.data!.bpi!.uSD!.symbol.toString()),
                        Text(snapshot.data!.bpi!.uSD!.rateFloat.toString()),
                      ],
                    ),
                  );
                } else if (snapshot.hasError) {
                  return Text("${snapshot.error}");
                }
                return CircularProgressIndicator();
              })
        ],
      ),
    );
  }
}

class Api2 extends StatefulWidget {
  const Api2({super.key});

  @override
  State<Api2> createState() => _Api2State();
}

class _Api2State extends State<Api2> {
  Future<Agify> fetchDataFromAgify() async {
    var agify = await http.get(Uri.parse("https://api.agify.io/?name=meelad"));
    return Agify.fromJson(jsonDecode(agify.body));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Column(
        children: [
          FutureBuilder(
              future: fetchDataFromAgify(),
              builder: (BuildContext context, snapshot) {
                if (snapshot.hasData) {
                  return Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Text(snapshot.data!.name.toString()),
                        Text(snapshot.data!.age.toString()),
                        Text(snapshot.data!.count.toString()),
                      ],
                    ),
                  );
                }
                return Center(
                  child: CircularProgressIndicator(),
                );
              })
        ],
      ),
    );
  }
}

class Api3 extends StatefulWidget {
  const Api3({super.key});

  @override
  State<Api3> createState() => _Api3State();
}

class _Api3State extends State<Api3> {
  Future<Gendarize> fetchDataFromGender() async {
    var gendar =
        await http.get(Uri.parse("https://api.genderize.io/?name=luc"));
    return Gendarize.fromJson(jsonDecode(gendar.body));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Column(
        children: [
          FutureBuilder(
              future: fetchDataFromGender(),
              builder: (BuildContext context, snapshot) {
                if (snapshot.hasData) {
                  Center(
                    child: Column(
                      children: [
                        // Text(snapshot.data!.name.toString()),
                        // Text(snapshot.data!.gender.toString()),
                        // Text(snapshot.data!.count.toString()),
                        Text(snapshot.data!.probability.toString()),
                      ],
                    ),
                  );
                }
                return CircularProgressIndicator();
              })
        ],
      ),
    );
  }
}

class Dogs extends StatefulWidget {
  const Dogs({super.key});

  @override
  State<Dogs> createState() => _DogsState();
}

class _DogsState extends State<Dogs> {
  Future<DogsA> fetchFromDogs() async {
    var res =
        await http.get(Uri.parse("https://dog.ceo/api/breeds/image/random"));
    return DogsA.fromJson(jsonDecode(res.body));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Column(
        children: [
          FutureBuilder(
              future: fetchFromDogs(),
              builder: (BuildContext context, snapshot) {
                if (snapshot.hasData) {
                  return Column(
                    children: [
                      Text(snapshot.data!.message.toString()),
                      Text(snapshot.data!.status.toString()),
                    ],
                  );
                }
                return Center(
                  child: CircularProgressIndicator(),
                );
              })
        ],
      ),
    );
  }
}

class Ipify extends StatefulWidget {
  const Ipify({super.key});

  @override
  State<Ipify> createState() => _IpifyState();
}

class _IpifyState extends State<Ipify> {
  Future<Ipify1> fetchFromIpify() async {
    var res = await http.get(Uri.parse("https://api.ipify.org/?format=json"));
    return Ipify1.fromJson(jsonDecode(res.body));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Column(
        children: [
          FutureBuilder(
              future: fetchFromIpify(),
              builder: (BuildContext context, snapshot) {
                if (snapshot.hasData) {
                  return Column(
                    children: [Text(snapshot.data!.ip.toString())],
                  );
                }
                return Center(
                  child: CircularProgressIndicator(),
                );
              })
        ],
      ),
    );
  }
}

class JokesA extends StatefulWidget {
  const JokesA({super.key});

  @override
  State<JokesA> createState() => _JokesAState();
}

class _JokesAState extends State<JokesA> {
  Future<Jokes> fetchFromJokes() async {
    var res = await http
        .get(Uri.parse("https://official-joke-api.appspot.com/random_joke"));
    return Jokes.fromJson(jsonDecode(res.body));
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        FutureBuilder(
            future: fetchFromJokes(),
            builder: (BuildContext context, snapshot) {
              if (snapshot.hasData) {
                return Column(
                  children: [
                    Text(snapshot.data!.id.toString()),
                    Text(snapshot.data!.punchline.toString()),
                    Text(snapshot.data!.setup.toString()),
                    Text(snapshot.data!.type.toString())
                  ],
                );
              }
              return Center(
                child: CircularProgressIndicator(),
              );
            })
      ],
    );
  }
}

class CatsApi extends StatefulWidget {
  const CatsApi({super.key});

  @override
  State<CatsApi> createState() => _CatsApiState();
}

class _CatsApiState extends State<CatsApi> {
  Future<Facts> fetchFromCat() async {
    var res = await http.get(Uri.parse("https://catfact.ninja/fact"));
    return Facts.fromJson(jsonDecode(res.body));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Column(
        children: [
          FutureBuilder(
              future: fetchFromCat(),
              builder: (BuildContext context, snapshot) {
                if (snapshot.hasData) {
                  return Column(
                    children: [
                      Text(snapshot.data!.fact.toString()),
                      Text(snapshot.data!.length.toString())
                    ],
                  );
                }
                return CircularProgressIndicator();
              })
        ],
      ),
    );
  }
}

class ApiList extends StatefulWidget {
  const ApiList({super.key});

  @override
  State<ApiList> createState() => _ApiListState();
}

class _ApiListState extends State<ApiList> {
  Future<List<ListApi>> fetch() async {
    var res = await http.get(Uri.parse("https://fakestoreapi.com/products"));
    var data = jsonDecode(res.body);
    return (data as List).map((e) => ListApi.fromJson(e)).toList();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Hi List'),
      ),
      body: FutureBuilder(
        future: fetch(),
        builder: (BuildContext context, AsyncSnapshot<dynamic> snapshot) {
          if (snapshot.hasData) {
            List<ListApi> list = snapshot.data!;
            return Expanded(
              child: ListView.builder(
                itemCount: list.length,
                itemBuilder: (BuildContext context, int index) {
                  return ListTile(
                    onTap: () {
                      Navigator.push(
                          context,
                          MaterialPageRoute(
                              builder: (context) =>
                                  IdPass(id: list[index].id!)));
                    },
                    leading: Container(
                      height: 70,
                      width: 70,
                      decoration: BoxDecoration(
                          image: DecorationImage(
                              image: NetworkImage(list[index].image!))),
                    ),
                    title: Column(
                      children: [
                        Text(list[index].id!.toString()),
                        Text(list[index].title!.toString()),
                        Text(list[index].description!.toString()),
                        Text(list[index].category!.toString()),
                        Text(list[index].rating!.rate.toString()),
                        Text(list[index].rating!.count.toString()),
                      ],
                    ),
                  );
                },
              ),
            );
          }
          return Center(
            child: CircularProgressIndicator(),
          );
        },
      ),
    );
  }
}

class IdPass extends StatefulWidget {
  final int? id;
  const IdPass({required this.id, super.key});

  @override
  State<IdPass> createState() => _IdPassState();
}

class _IdPassState extends State<IdPass> {
  Future<Id> fetchFromId() async {
    var res = await http
        .get(Uri.parse("https://fakestoreapi.com/products/${widget.id}"));
    print(widget.id);
    return Id.fromJson(jsonDecode(res.body));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: FutureBuilder(
        future: fetchFromId(),
        builder: (BuildContext context, snapshot) {
          if (snapshot.hasData) {
            return Column(
              children: [
                Center(
                  child: Container(
                    height: 120,
                    width: 120,
                    decoration: BoxDecoration(
                        image: DecorationImage(
                            image: NetworkImage(snapshot.data!.image!))),
                  ),
                ),
                Text(snapshot.data!.id!.toString()),
                SizedBox(
                  height: 10,
                ),
                Text(snapshot.data!.title!.toString()),
                SizedBox(
                  height: 10,
                ),
                Text(snapshot.data!.description!.toString()),
                SizedBox(
                  height: 10,
                ),
                Text(snapshot.data!.category!.toString()),
                SizedBox(
                  height: 10,
                ),
                Text(snapshot.data!.rating!.rate.toString()),
                SizedBox(
                  height: 10,
                ),
                Text(snapshot.data!.rating!.count.toString()),
              ],
            );
          }
          return Center(
            child: CircularProgressIndicator(),
          );
        },
      ),
    );
  }
}
